{"ast":null,"code":"// Import Express\nconst express = require('express');\n// Create an instance of an Express Router\nconst router = express.Router();\nconst jwt = require('jsonwebtoken');\nconst {\n  Role\n} = require('../models/RoleModel');\nconst {\n  User\n} = require('../models/UserModel');\nconst {\n  encryptString,\n  decryptString,\n  decryptObject,\n  hashString,\n  validateHashedData,\n  generateJWT,\n  generateUserJWT,\n  verifyUserJWT,\n  getAllUsers,\n  getSpecificUser,\n  createUser,\n  updateUser,\n  deleteUser\n} = require('./UserFunctions');\n\n// Validate user email uniqueness\nconst uniqueEmailCheck = async (request, response, next) => {\n  let isEmailInUse = await User.exists({\n    email: request.body.email\n  }).exec();\n  if (isEmailInUse) {\n    next(new Error(\"An account with this email address already exists.\"));\n  } else {\n    next();\n  }\n};\n\n// If any errors are detected, end the route early\n// and respond with the error message\nconst handleErrors = async (error, request, response, next) => {\n  if (error) {\n    response.status(500).json({\n      error: error.message\n    });\n  } else {\n    next();\n  }\n};\n\n// Sign-up a new user\nrouter.post('/sign-up', async (request, response) => {\n  let userDetails = {\n    email: request.body.email,\n    password: request.body.password,\n    username: request.body.username,\n    country: request.body.country,\n    roleID: request.body.roleID\n  };\n  let newUserDoc = await createUser(userDetails);\n  response.json({\n    user: newUserDoc\n  });\n});\n\n// Sign-in an existing user\nrouter.post('/sign-in', async (request, response) => {\n  let targetUser = await User.findOne({\n    email: request.body.email\n  }).exec();\n  if (await validateHashedData(request.body.password, targetUser.password)) {\n    let encryptedUserJwt = await generateUserJWT({\n      userID: targetUser.id,\n      email: targetUser.email,\n      password: targetUser.password\n    });\n    response.json(encryptedUserJwt);\n  } else {\n    response.status(400).json({\n      message: \"Invalid user details provided.\"\n    });\n  }\n});\n\n// Extend a user's JWT validity\nrouter.post('/token-refresh', async (request, response) => {\n  let oldToken = request.body.jwt;\n  let refreshResult = await verifyUserJWT(oldToken).catch(error => {\n    return {\n      error: error.message\n    };\n  });\n  response.json(refreshResult);\n});\n\n// Update a user\nrouter.put('/:userID', async (request, response) => {\n  let userDetails = {\n    userID: request.params.userID,\n    updatedData: request.body.newUserData\n  };\n  response.json(await updateUser(userDetails));\n});\n\n// Delete a user\nrouter.delete('/:userID', async (request, response) => {\n  response.json(await deleteUser(request.params.userID));\n});\n\n// List all users\nrouter.get('/', async (request, response) => {\n  let allUsers = await getAllUsers();\n  response.json({\n    userCount: allUsers.length,\n    usersArray: allUsers\n  });\n});\n\n// Show a specific user\nrouter.get('/:userID', async (request, response) => {\n  response.json(await getSpecificUser(request.params.userID));\n});\n\n// Export the router so that other files can use it:\nmodule.exports = router;","map":{"version":3,"names":["express","require","router","Router","jwt","Role","User","encryptString","decryptString","decryptObject","hashString","validateHashedData","generateJWT","generateUserJWT","verifyUserJWT","getAllUsers","getSpecificUser","createUser","updateUser","deleteUser","uniqueEmailCheck","request","response","next","isEmailInUse","exists","email","body","exec","Error","handleErrors","error","status","json","message","post","userDetails","password","username","country","roleID","newUserDoc","user","targetUser","findOne","encryptedUserJwt","userID","id","oldToken","refreshResult","catch","put","params","updatedData","newUserData","delete","get","allUsers","userCount","length","usersArray","module","exports"],"sources":["/Users/serteriyigunlu/Desktop/travel-log-app/src/controllers/UserRoutes.js"],"sourcesContent":["// Import Express\nconst express = require('express');\n// Create an instance of an Express Router\nconst router = express.Router();\nconst jwt = require('jsonwebtoken');\nconst { Role } = require('../models/RoleModel');\nconst { User } = require('../models/UserModel');\n\nconst {\n    encryptString, decryptString, decryptObject, hashString, validateHashedData,\n    generateJWT, generateUserJWT, verifyUserJWT,\n    getAllUsers, getSpecificUser, createUser, updateUser, deleteUser\n} = require('./UserFunctions');\n\n// Validate user email uniqueness\nconst uniqueEmailCheck = async (request, response, next) => {\n    let isEmailInUse = await User.exists({email: request.body.email}).exec();\n    if (isEmailInUse){\n        next(new Error(\"An account with this email address already exists.\"));\n    } else {\n        next();\n    }\n\n}\n\n// If any errors are detected, end the route early\n// and respond with the error message\nconst handleErrors = async (error, request, response, next) => {\n    if (error) {\n        response.status(500).json({\n            error: error.message\n        });\n    } else {\n        next();\n    }\n}\n\n\n\n// Sign-up a new user\nrouter.post('/sign-up', async (request, response) => {\n    let userDetails = {\n        email: request.body.email,\n        password: request.body.password,\n        username: request.body.username,\n        country: request.body.country,\n        roleID: request.body.roleID\n    }\n    let newUserDoc = await createUser(userDetails);\n\n    response.json({\n        user: newUserDoc\n    });\n\n});\n\n// Sign-in an existing user\nrouter.post('/sign-in', async (request, response) => {\n    let targetUser = await User.findOne({email: request.body.email}).exec();\n\n    if (await validateHashedData(request.body.password, targetUser.password)){\n        let encryptedUserJwt = await generateUserJWT(\n            {\n                userID: targetUser.id,\n                email: targetUser.email,\n                password: targetUser.password\n            }\n        );\n\n        response.json(encryptedUserJwt);\n\n    } else {\n        response.status(400).json({message:\"Invalid user details provided.\"});\n    }\n});\n\n// Extend a user's JWT validity\nrouter.post('/token-refresh', async(request, response) => {\n    let oldToken = request.body.jwt;\n    let refreshResult = await verifyUserJWT(oldToken).catch(error => {return {error: error.message}})\n    response.json(refreshResult);\n});\n\n// Update a user\nrouter.put('/:userID', async (request, response) => {\n    let userDetails = {\n        userID: request.params.userID,\n        updatedData: request.body.newUserData\n    };\n\n    response.json(await updateUser(userDetails));\n});\n\n// Delete a user\nrouter.delete('/:userID', async (request, response) => {\n    response.json(await deleteUser(request.params.userID));\n});\n\n// List all users\nrouter.get('/', async (request, response) => {\n    let allUsers = await getAllUsers();\n\n    response.json({\n        userCount: allUsers.length,\n        usersArray: allUsers\n    });\n});\n\n// Show a specific user\nrouter.get('/:userID', async (request, response) => {\n    response.json(await getSpecificUser(request.params.userID));\n});\n\n// Export the router so that other files can use it:\nmodule.exports = router;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}