{"ast":null,"code":"// Require specific models so that we can\n// create functionality involving them.\nconst {\n  User\n} = require('../models/UserModel');\nconst dotenv = require('dotenv');\ndotenv.config();\n\n// --------------------------------------\n// ----- Encryption & decryption functionality\n\nconst crypto = require('crypto');\nlet encAlgorithm = 'aes-256-cbc';\nlet encPrivateKey = crypto.scryptSync(process.env.ENC_KEY, 'SpecialSalt', 32);\nlet encIV = crypto.scryptSync(process.env.ENC_IV, 'SpecialSalt', 16);\nlet cipher = crypto.createCipheriv(encAlgorithm, encPrivateKey, encIV);\nlet decipher = crypto.createDecipheriv(encAlgorithm, encPrivateKey, encIV);\n\n// Convert a given string into an encrypted string.\nfunction encryptString(data) {\n  cipher = crypto.createCipheriv(encAlgorithm, encPrivateKey, encIV);\n  return cipher.update(data, 'utf8', 'hex') + cipher.final('hex');\n}\n\n// Turn the encrypted data back into a plaintext string.\nfunction decryptString(data) {\n  decipher = crypto.createDecipheriv(encAlgorithm, encPrivateKey, encIV);\n  return decipher.update(data, 'hex', 'utf8') + decipher.final('utf8');\n}\n\n// Assumes an encrypted string is a JSON object.\n// Decrypts that string and turns it into a regular JavaScript object.\nfunction decryptObject(data) {\n  return JSON.parse(decryptString(data));\n}\n\n// --------------------------------------\n// ----- Hashing & Salting functionality\n\nconst bcrypt = require('bcrypt');\nconst saltRounds = 10;\nasync function hashString(stringToHash) {\n  let saltToAdd = await bcrypt.genSalt(saltRounds);\n  return await bcrypt.hash(stringToHash, saltToAdd);\n}\nasync function validateHashedData(providedUnhashedData, storedHashedData) {\n  return await bcrypt.compare(providedUnhashedData, storedHashedData);\n}\n\n// --------------------------------------\n// ----- JWT functionality\n\nconst jwt = require('jsonwebtoken');\nfunction generateJWT(payloadObj) {\n  return jwt.sign(payloadObj, process.env.JWT_SECRET, {\n    expiresIn: \"7d\"\n  });\n}\nasync function generateUserJWT(userDetails) {\n  // Encrypt the payload so that it's not plaintext when viewed outside of this app.\n  let encryptedUserData = encryptString(JSON.stringify(userDetails));\n  // The expiresIn option only works if the payload is an object, not a string.\n  return generateJWT({\n    data: encryptedUserData\n  });\n}\nasync function verifyUserJWT(userJWT) {\n  // Verify that the JWT is still valid.\n  let userJwtVerified = jwt.verify(userJWT, process.env.JWT_SECRET, {\n    complete: true\n  });\n  // Decrypt the encrypted payload.\n  let decryptedJwtPayload = decryptString(userJwtVerified.payload.data);\n  // Parse the decrypted data into an object.\n  let userData = JSON.parse(decryptedJwtPayload);\n  // Find the user mentioned in the JWT.\n  let targetUser = await User.findById(userData.userID).exec();\n  // If the JWT data matches the stored data...\n  if (targetUser.password == userData.password && targetUser.email == userData.email) {\n    // ...User details are valid, make a fresh JWT to extend their token's valid time\n    return generateJWT({\n      data: userJwtVerified.payload.data\n    });\n  } else {\n    // Otherwise, user details are invalid and they don't get a new token.\n    // When a frontend receives this error, it should redirect to a sign-in page.\n    throw new Error({\n      message: \"Invalid user token.\"\n    });\n  }\n}\n\n// --------------------------------------\n// ----- MongoDB/MongooseJS functionality\n\nasync function getAllUsers() {\n  // Returns an array of raw MongoDB database documents.\n  return await User.find({});\n}\nasync function getSpecificUser(userID) {\n  // Returns the raw MongoDB database document.\n  return await User.findById(userID);\n}\nasync function createUser(userDetails) {\n  // Hash the password\n  userDetails.hashedPassword = await hashString(userDetails.password);\n\n  // Create new user based on userDetails data\n  let newUser = new User({\n    email: userDetails.email,\n    password: userDetails.hashedPassword,\n    username: userDetails.username,\n    country: userDetails.country,\n    role: userDetails.roleID\n  });\n\n  // And save it to DB\n  return await newUser.save();\n}\nasync function updateUser(userDetails) {\n  // Find user, update it, return the updated user data.\n  return await User.findByIdAndUpdate(userDetails.userID, userDetails.updatedData, {\n    returnDocument: 'after'\n  }).exec();\n}\nasync function deleteUser(userID) {\n  return await User.findByIdAndDelete(userID).exec();\n}\n\n// --------------------------------------\n// ----- Exports\n\nmodule.exports = {\n  encryptString,\n  decryptString,\n  decryptObject,\n  hashString,\n  validateHashedData,\n  generateJWT,\n  generateUserJWT,\n  verifyUserJWT,\n  getAllUsers,\n  getSpecificUser,\n  createUser,\n  updateUser,\n  deleteUser\n};","map":{"version":3,"names":["User","require","dotenv","config","crypto","encAlgorithm","encPrivateKey","scryptSync","process","env","ENC_KEY","encIV","ENC_IV","cipher","createCipheriv","decipher","createDecipheriv","encryptString","data","update","final","decryptString","decryptObject","JSON","parse","bcrypt","saltRounds","hashString","stringToHash","saltToAdd","genSalt","hash","validateHashedData","providedUnhashedData","storedHashedData","compare","jwt","generateJWT","payloadObj","sign","JWT_SECRET","expiresIn","generateUserJWT","userDetails","encryptedUserData","stringify","verifyUserJWT","userJWT","userJwtVerified","verify","complete","decryptedJwtPayload","payload","userData","targetUser","findById","userID","exec","password","email","Error","message","getAllUsers","find","getSpecificUser","createUser","hashedPassword","newUser","username","country","role","roleID","save","updateUser","findByIdAndUpdate","updatedData","returnDocument","deleteUser","findByIdAndDelete","module","exports"],"sources":["/Users/serteriyigunlu/Desktop/travel-log-app/src/controllers/UserFunctions.js"],"sourcesContent":["// Require specific models so that we can\n// create functionality involving them.\nconst { User } = require('../models/UserModel');\n\nconst dotenv = require('dotenv');\ndotenv.config();\n\n// --------------------------------------\n// ----- Encryption & decryption functionality\n\nconst crypto = require('crypto');\nlet encAlgorithm = 'aes-256-cbc';\nlet encPrivateKey = crypto.scryptSync(process.env.ENC_KEY, 'SpecialSalt', 32);\nlet encIV = crypto.scryptSync(process.env.ENC_IV, 'SpecialSalt', 16);\nlet cipher = crypto.createCipheriv(encAlgorithm, encPrivateKey, encIV);\nlet decipher = crypto.createDecipheriv(encAlgorithm, encPrivateKey, encIV);\n\n// Convert a given string into an encrypted string.\nfunction encryptString(data){\n    cipher = crypto.createCipheriv(encAlgorithm, encPrivateKey, encIV);\n    return cipher.update(data, 'utf8', 'hex') + cipher.final('hex');\n}\n\n// Turn the encrypted data back into a plaintext string.\nfunction decryptString(data){\n    decipher = crypto.createDecipheriv(encAlgorithm, encPrivateKey, encIV);\n    return decipher.update(data, 'hex', 'utf8') + decipher.final('utf8');\n}\n\n// Assumes an encrypted string is a JSON object.\n// Decrypts that string and turns it into a regular JavaScript object.\nfunction decryptObject(data){\n    return JSON.parse(decryptString(data));\n}\n\n// --------------------------------------\n// ----- Hashing & Salting functionality\n\nconst bcrypt = require('bcrypt');\nconst saltRounds = 10;\n\nasync function hashString(stringToHash){\n    let saltToAdd = await bcrypt.genSalt(saltRounds);\n    return await bcrypt.hash(stringToHash, saltToAdd);\n}\n\nasync function validateHashedData(providedUnhashedData, storedHashedData){\n    return await bcrypt.compare(providedUnhashedData, storedHashedData);\n}\n\n\n// --------------------------------------\n// ----- JWT functionality\n\nconst jwt = require('jsonwebtoken');\n\nfunction generateJWT(payloadObj){\n    return jwt.sign(payloadObj, process.env.JWT_SECRET, { expiresIn: \"7d\"});\n}\n\n\nasync function generateUserJWT(userDetails){\n    // Encrypt the payload so that it's not plaintext when viewed outside of this app.\n    let encryptedUserData = encryptString(JSON.stringify(userDetails));\n    // The expiresIn option only works if the payload is an object, not a string.\n    return generateJWT({data: encryptedUserData});\n}\n\nasync function verifyUserJWT(userJWT){\n    // Verify that the JWT is still valid.\n    let userJwtVerified = jwt.verify(userJWT,process.env.JWT_SECRET, {complete: true});\n    // Decrypt the encrypted payload.\n    let decryptedJwtPayload = decryptString(userJwtVerified.payload.data);\n    // Parse the decrypted data into an object.\n    let userData = JSON.parse(decryptedJwtPayload);\n    // Find the user mentioned in the JWT.\n    let targetUser = await User.findById(userData.userID).exec();\n    // If the JWT data matches the stored data...\n    if (targetUser.password == userData.password && targetUser.email == userData.email){\n        // ...User details are valid, make a fresh JWT to extend their token's valid time\n        return generateJWT({data: userJwtVerified.payload.data});\n    } else {\n        // Otherwise, user details are invalid and they don't get a new token.\n        // When a frontend receives this error, it should redirect to a sign-in page.\n        throw new Error({message: \"Invalid user token.\"});\n    }\n}\n\n\n// --------------------------------------\n// ----- MongoDB/MongooseJS functionality\n\nasync function getAllUsers(){\n    // Returns an array of raw MongoDB database documents.\n    return await User.find({});\n\n}\n\nasync function getSpecificUser(userID){\n    // Returns the raw MongoDB database document.\n    return await User.findById(userID);\n}\n\nasync function createUser(userDetails){\n\n\n    // Hash the password\n    userDetails.hashedPassword = await hashString(userDetails.password);\n\n    // Create new user based on userDetails data\n    let newUser = new User(\n        {\n            email: userDetails.email,\n            password: userDetails.hashedPassword,\n            username: userDetails.username,\n            country: userDetails.country,\n            role: userDetails.roleID\n        }\n    )\n\n    // And save it to DB\n    return await newUser.save();\n}\n\nasync function updateUser(userDetails){\n    // Find user, update it, return the updated user data.\n    return await User.findByIdAndUpdate(userDetails.userID, userDetails.updatedData, {returnDocument: 'after'}).exec();\n\n}\n\nasync function deleteUser(userID){\n    return await User.findByIdAndDelete(userID).exec();\n}\n\n\n// --------------------------------------\n// ----- Exports\n\nmodule.exports = {\n    encryptString, decryptString, decryptObject, hashString, validateHashedData,\n    generateJWT, generateUserJWT, verifyUserJWT,\n    getAllUsers, getSpecificUser, createUser, updateUser, deleteUser\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}