{"ast":null,"code":"// Make the .env data ready for use.\nconst dotenv = require('dotenv');\ndotenv.config();\n\n// Import the Express package and configure some needed data.\nconst express = require('express');\nconst app = express();\n// If no process.env.X is found, assign a default value instead.\nconst HOST = process.env.HOST || 'localhost';\nconst PORT = process.env.PORT || 3000;\n\n// Configure some basic Helmet settings on the server instance.\nconst helmet = require('helmet');\napp.use(helmet());\napp.use(helmet.permittedCrossDomainPolicies());\napp.use(helmet.referrerPolicy());\napp.use(helmet.contentSecurityPolicy({\n  directives: {\n    defaultSrc: [\"'self'\"]\n  }\n}));\n\n// Configure some basic CORS settings on the server instance.\n// These origin values don't actually have to be anything - \n// this project exists without a front-end, but any front-end\n// that should interact with this API should be listed in the \n// array of origins for CORS configuration.\nconst cors = require('cors');\nvar corsOptions = {\n  origin: [\"http://localhost:5000\", \"https://deployedApp.com\"],\n  optionsSuccessStatus: 200\n};\napp.use(cors(corsOptions));\n\n// Configure some API-friendly request data formatting.\napp.use(express.json());\napp.use(express.urlencoded({\n  extended: true\n}));\nconst mongoose = require('mongoose');\nvar databaseURL = \"\";\nswitch (process.env.NODE_ENV.toLowerCase()) {\n  case \"test\":\n    databaseURL = \"mongodb://localhost:27017/ExpressBuildAnAPI-test\";\n    break;\n  case \"development\":\n    databaseURL = \"mongodb://localhost:27017/ExpressBuildAnAPI-dev\";\n    break;\n  case \"production\":\n    databaseURL = process.env.DATABASE_URL;\n    break;\n  default:\n    console.error(\"Incorrect JS environment specified, database will not be connected.\");\n    break;\n}\nconst {\n  databaseConnector\n} = require('./database');\ndatabaseConnector(databaseURL).then(() => {\n  console.log(\"Database connected successfully!\");\n}).catch(error => {\n  console.log(`\n    Some error occurred connecting to the database! It was: \n    ${error}\n    `);\n});\n// Return a bunch of useful details from the database connection\n// Dig into each property here:\n// https://mongoosejs.com/docs/api/connection.html\napp.get(\"/databaseHealth\", (request, response) => {\n  let databaseState = mongoose.connection.readyState;\n  let databaseName = mongoose.connection.name;\n  let databaseModels = mongoose.connection.modelNames();\n  let databaseHost = mongoose.connection.host;\n  response.json({\n    readyState: databaseState,\n    dbName: databaseName,\n    dbModels: databaseModels,\n    dbHost: databaseHost\n  });\n});\n// Add a route just to make sure things work.\n// This path is the server API's \"homepage\".\napp.get('/', (request, response) => {\n  response.json({\n    message: \"Hello world!\"\n  });\n});\n\n// Keep this route at the end of this file, only before the module.exports!\n// A 404 route should only trigger if no preceding routes or middleware was run. \n// So, put this below where any other routes are placed within this file.\napp.get('*', (request, response) => {\n  response.status(404).json({\n    message: \"No route with that path found!\",\n    attemptedPath: request.path\n  });\n});\n\n// Export everything needed to run the server.\nmodule.exports = {\n  HOST,\n  PORT,\n  app\n};","map":{"version":3,"names":["dotenv","require","config","express","app","HOST","process","env","PORT","helmet","use","permittedCrossDomainPolicies","referrerPolicy","contentSecurityPolicy","directives","defaultSrc","cors","corsOptions","origin","optionsSuccessStatus","json","urlencoded","extended","mongoose","databaseURL","NODE_ENV","toLowerCase","DATABASE_URL","console","error","databaseConnector","then","log","catch","get","request","response","databaseState","connection","readyState","databaseName","name","databaseModels","modelNames","databaseHost","host","dbName","dbModels","dbHost","message","status","attemptedPath","path","module","exports"],"sources":["/Users/serteriyigunlu/Desktop/travel-log-app/src/server.js"],"sourcesContent":["// Make the .env data ready for use.\nconst dotenv = require('dotenv');\ndotenv.config();\n\n// Import the Express package and configure some needed data.\nconst express = require('express');\nconst app = express();\n// If no process.env.X is found, assign a default value instead.\nconst HOST = process.env.HOST || 'localhost';\nconst PORT = process.env.PORT || 3000;\n\n// Configure some basic Helmet settings on the server instance.\nconst helmet = require('helmet');\napp.use(helmet());\napp.use(helmet.permittedCrossDomainPolicies());\napp.use(helmet.referrerPolicy());\napp.use(helmet.contentSecurityPolicy({\n    directives:{\n        defaultSrc:[\"'self'\"]\n    }\n}));\n\n// Configure some basic CORS settings on the server instance.\n// These origin values don't actually have to be anything - \n// this project exists without a front-end, but any front-end\n// that should interact with this API should be listed in the \n// array of origins for CORS configuration.\nconst cors = require('cors');\nvar corsOptions = {\n    origin: [\"http://localhost:5000\", \"https://deployedApp.com\"],\n    optionsSuccessStatus: 200\n}\napp.use(cors(corsOptions));\n\n// Configure some API-friendly request data formatting.\napp.use(express.json());\napp.use(express.urlencoded({extended: true}));\n\n\nconst mongoose = require('mongoose');\nvar databaseURL = \"\";\nswitch (process.env.NODE_ENV.toLowerCase()) {\n    case \"test\":\n        databaseURL = \"mongodb://localhost:27017/ExpressBuildAnAPI-test\";\n        break;\n    case \"development\":\n        databaseURL = \"mongodb://localhost:27017/ExpressBuildAnAPI-dev\";\n        break;\n    case \"production\":\n        databaseURL = process.env.DATABASE_URL;\n        break;\n    default:\n        console.error(\"Incorrect JS environment specified, database will not be connected.\");\n        break;\n}\nconst {databaseConnector} = require('./database');\ndatabaseConnector(databaseURL).then(() => {\n    console.log(\"Database connected successfully!\");\n}).catch(error => {\n    console.log(`\n    Some error occurred connecting to the database! It was: \n    ${error}\n    `);\n});\n// Return a bunch of useful details from the database connection\n// Dig into each property here:\n// https://mongoosejs.com/docs/api/connection.html\napp.get(\"/databaseHealth\", (request, response) => {\n    let databaseState = mongoose.connection.readyState;\n    let databaseName = mongoose.connection.name;\n    let databaseModels = mongoose.connection.modelNames();\n    let databaseHost = mongoose.connection.host;\n\n    response.json({\n        readyState: databaseState,\n        dbName: databaseName,\n        dbModels: databaseModels,\n        dbHost: databaseHost\n    })\n});\n// Add a route just to make sure things work.\n// This path is the server API's \"homepage\".\napp.get('/', (request, response) => {\n    response.json({\n        message:\"Hello world!\"\n    });\n});\n\n// Keep this route at the end of this file, only before the module.exports!\n// A 404 route should only trigger if no preceding routes or middleware was run. \n// So, put this below where any other routes are placed within this file.\napp.get('*', (request, response) => {\n    response.status(404).json({\n        message: \"No route with that path found!\",\n        attemptedPath: request.path\n    });\n});\n\n// Export everything needed to run the server.\nmodule.exports = {\n    HOST,\n    PORT,\n    app\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}